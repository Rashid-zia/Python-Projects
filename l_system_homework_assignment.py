# -*- coding: utf-8 -*-
"""L_system_homework_assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/138j0ibblt3tfsGHKseb67RWG8A4YM1KT
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from IPython.display import HTML, display
import random

# —————————————————————————————————————————————
# 1) L-system string generator
# —————————————————————————————————————————————
def generate_l_system(axiom, rules, iterations):
    seq = axiom
    for i in range(iterations):
        seq = ''.join(rules.get(c, c) for c in seq)
        print(f"Iteration {i+1}: {seq}")
    return seq

# —————————————————————————————————————————————
# 2) Draw a single L-system string
# —————————————————————————————————————————————
def draw_l_system(l_system_string, angle, step_size=10):
    x = [0]; y = [0]
    direction = 0            # pointing along +x
    stack = []

    for ch in l_system_string:
        if ch.isalnum():
            new_x = x[-1] + step_size * np.cos(np.radians(direction))
            new_y = y[-1] + step_size * np.sin(np.radians(direction))
            x.extend([x[-1], new_x])
            y.extend([y[-1], new_y])
        elif ch == "+":
            direction += angle
        elif ch == "-":
            direction -= angle
        elif ch == "[":
            stack.append((x[-1], y[-1], direction))
        elif ch == "]":
            cx, cy, direction = stack.pop()
            x.append(cx); y.append(cy)

    plt.figure(figsize=(6,6))
    plt.plot(x, y, lw=1, color="black")
    plt.axis("equal"); plt.axis("off")
    plt.show()

# —————————————————————————————————————————————
# 3) Animate L-system from depth 0 → max_iterations
# —————————————————————————————————————————————
def animate_l_system(axiom, rules, angle, max_iterations, step_size=10):
    # Precompute all strings
    def apply_rules(s):
        return ''.join(rules.get(c, c) for c in s)

    strings = [axiom]
    for _ in range(max_iterations):
        strings.append(apply_rules(strings[-1]))

    fig, ax = plt.subplots(figsize=(6,6))

    def update(frame):
        ax.clear()
        ax.set_title(f"Iteration: {frame}")
        ax.axis("equal"); ax.axis("off")

        s = strings[frame]
        cx, cy, dir = 0, 0, 0
        stack = []
        xs, ys = [], []

        for ch in s:
            if ch.isalnum():
                nx = cx + step_size * np.cos(np.radians(dir))
                ny = cy + step_size * np.sin(np.radians(dir))
                xs.extend([cx, nx]); ys.extend([cy, ny])
                cx, cy = nx, ny
            elif ch == "+":
                dir += angle
            elif ch == "-":
                dir -= angle
            elif ch == "[":
                stack.append((cx, cy, dir))
            elif ch == "]":
                cx, cy, dir = stack.pop()

        ax.plot(xs, ys, lw=1, color="black")

    ani = animation.FuncAnimation(
        fig, update,
        frames=range(max_iterations+1),
        interval=800,
        repeat=False
    )
    plt.close(fig)
    return HTML(ani.to_jshtml())

# —————————————————————————————————————————————
# 4) Examples
# —————————————————————————————————————————————

print("Koch Curve:")
anim1 = animate_l_system(
    "F", {"F": "F+F-F-F+F"}, 60, max_iterations=6
)
display(anim1)

print("Sierpiński Triangle:")
anim2 = animate_l_system(
    "F-G-G", {"F": "F-G+F+G-F", "G": "GG"}, 120, max_iterations=6
)
display(anim2)

print("Branching Tree:")
angle_var = random.choice([30, 35, 40])
anim3 = animate_l_system(
    "F", {"F": "F[+F]F[-F][F]"}, angle_var, max_iterations=6
)
display(anim3)

print("Custom L-System: Spiral Plant:")
angle_var2 = random.choice([30, 35, 40])
anim4 = animate_l_system(
    "X", {"X": "F[+X]F[-X]+X", "F": "FF"}, angle_var2, max_iterations=6
)
display(anim4)







